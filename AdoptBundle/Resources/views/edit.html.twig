{% extends ":Layout:Layout.html.twig" %}

{% block content %}
    <!--Inner Banner Content Start-->
    <section class="cp-inner-banner">
        <div class="container">
            <div class="cp-inner-banner-outer">
                <h2>Checkout</h2>
                <!--Breadcrumb Start-->
                <ul class="breadcrumb">
                    <li><a href="index.html">Home</a></li>
                    <li>Products</li>
                    <li class="active">Checkout</li>
                </ul><!--Breadcrumb End-->
            </div>
        </div>
    </section><!--Inner Banner Content End-->



    <!--Main Content Start-->
    <div class="cp-main-content">

        <!--Checkout Section Start-->
        <section class="cp-checkout-section pd-t100">
            <div class="container">
                <!--Checkout Form Start-->
                <form class="cp-checkout-form" method="post">
                    <div class="row">
                        <div class="col-md-6 col-sm-12">

                            <!--Inner Holder Start-->
                            <div class="inner-holder">
                                <label>NAME*</label>
                                <input type="text" name="name" value="{{ pets.namePet }}">
                            </div><!--Inner Holder End-->
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <!--Inner Holder Start-->
                            <div class="inner-holder">
                                <label>SEX*</label>
                                <input type="text" name="sex" value="{{ pets.sex }}">
                            </div><!--Inner Holder End-->
                        </div>
                        <div class="col-md-12 col-sm-12">
                            <div class="inner-holder">
                                <label>BREED*</label>
                                <input type="text" name="breed" value="{{ pets.breed }}" required pattern="[a-zA-Z ]+">
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12">
                            <div class="inner-holder">
                                <label>COLOR*</label>
                                <input type="text" name="color" value="{{ pets.color }}" required pattern="[a-zA-Z ]+">
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12">
                            <div class="inner-holder">
                                <label>AGE*</label>
                                <input type="text" name="age" value="{{ pets.age }}" required>
                            </div>
                        </div>
                        <div class="col-md-12 col-sm-12">
                            <div class="inner-holder">
                                <label>GOVERNATE</label>
                                <input type="text" name="governate" value="{{ pets.governate }}" required>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>CITY</label>
                                <input type="text" value="{{ pets.city }}" required>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>ZIP</label>
                                <input type="text" name="zip" value="{{ pets.zip }}" required>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">


                            <style>
                                /* Always set the map height explicitly to define the size of the div
                                 * element that contains the map. */
                                #map {
                                    height: 400px;
                                }
                                /* Optional: Makes the sample page fill the window. */
                                html, body {
                                    height: 100%;
                                    margin: 0;
                                    padding: 0;
                                }
                                .controls {
                                    margin-top: 10px;
                                    border: 1px solid transparent;
                                    border-radius: 2px 0 0 2px;
                                    box-sizing: border-box;
                                    -moz-box-sizing: border-box;
                                    height: 32px;
                                    outline: none;
                                    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
                                }

                                #pac-input {
                                    background-color: #fff;
                                    font-family: Roboto;
                                    font-size: 15px;
                                    font-weight: 300;
                                    margin-left: 12px;
                                    padding: 0 11px 0 13px;
                                    text-overflow: ellipsis;
                                    width: 300px;
                                }

                                #pac-input:focus {
                                    border-color: #4d90fe;
                                }

                                .pac-container {
                                    font-family: Roboto;
                                }

                                #type-selector {
                                    color: #fff;
                                    background-color: #4d90fe;
                                    padding: 5px 11px 0px 11px;
                                }

                                #type-selector label {
                                    font-family: Roboto;
                                    font-size: 13px;
                                    font-weight: 300;
                                }
                            </style>

                            <input id="pac-input" class="controls" type="text"
                                   name="city" placeholder="Enter a location">
                            <div id="type-selector" class="controls">
                                <input type="radio" name="type" id="changetype-all" checked="checked">
                                <label for="changetype-all">All</label>

                                <input type="radio" name="type" id="changetype-establishment">
                                <label for="changetype-establishment">Establishments</label>

                                <input type="radio" name="type" id="changetype-address">
                                <label for="changetype-address">Addresses</label>

                                <input type="radio" name="type" id="changetype-geocode">
                                <label for="changetype-geocode">Geocodes</label>
                            </div>
                            <div id="map"></div>

                            <script>
                                // This example requires the Places library. Include the libraries=places
                                // parameter when you first load the API. For example:
                                // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

                                function initMap() {
                                    var map = new google.maps.Map(document.getElementById('map'), {
                                        center: {lat: -33.8688, lng: 151.2195},
                                        zoom: 13
                                    });
                                    var input = /** @type {!HTMLInputElement} */(
                                        document.getElementById('pac-input'));

                                    var types = document.getElementById('type-selector');
                                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

                                    var autocomplete = new google.maps.places.Autocomplete(input);
                                    autocomplete.bindTo('bounds', map);

                                    var infowindow = new google.maps.InfoWindow();
                                    var marker = new google.maps.Marker({
                                        map: map,
                                        anchorPoint: new google.maps.Point(0, -29)
                                    });

                                    autocomplete.addListener('place_changed', function() {
                                        infowindow.close();
                                        marker.setVisible(false);
                                        var place = autocomplete.getPlace();
                                        if (!place.geometry) {
                                            // User entered the name of a Place that was not suggested and
                                            // pressed the Enter key, or the Place Details request failed.
                                            window.alert("No details available for input: '" + place.name + "'");
                                            return;
                                        }

                                        // If the place has a geometry, then present it on a map.
                                        if (place.geometry.viewport) {
                                            map.fitBounds(place.geometry.viewport);
                                        } else {
                                            map.setCenter(place.geometry.location);
                                            map.setZoom(17);  // Why 17? Because it looks good.
                                        }
                                        marker.setIcon(/** @type {google.maps.Icon} */({
                                            url: place.icon,
                                            size: new google.maps.Size(71, 71),
                                            origin: new google.maps.Point(0, 0),
                                            anchor: new google.maps.Point(17, 34),
                                            scaledSize: new google.maps.Size(35, 35)
                                        }));
                                        marker.setPosition(place.geometry.location);
                                        marker.setVisible(true);

                                        var address = '';
                                        if (place.address_components) {
                                            address = [
                                                (place.address_components[0] && place.address_components[0].short_name || ''),
                                                (place.address_components[1] && place.address_components[1].short_name || ''),
                                                (place.address_components[2] && place.address_components[2].short_name || '')
                                            ].join(' ');
                                        }

                                        infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
                                        infowindow.open(map, marker);
                                    });

                                    // Sets a listener on a radio button to change the filter type on Places
                                    // Autocomplete.
                                    function setupClickListener(id, types) {
                                        var radioButton = document.getElementById(id);
                                        radioButton.addEventListener('click', function() {
                                            autocomplete.setTypes(types);
                                        });
                                    }

                                    setupClickListener('changetype-all', []);
                                    setupClickListener('changetype-address', ['address']);
                                    setupClickListener('changetype-establishment', ['establishment']);
                                    setupClickListener('changetype-geocode', ['geocode']);
                                }
                            </script>
                            <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCVd1zxw6RyTXsutTpBuvVnOazwBWxs8Ok&libraries=places&callback=initMap"
                                    async defer></script>

                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>DESCRIPTION</label>
                                <input type="text" name="description" value="{{ pets.description }}" required>
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>IMAGE</label>
                                <input type="file" name="image"  >
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>TYPE PROFILE</label>
                                <input type="tel" name="type" value="{{ pets.type }}" >
                            </div>
                        </div>
                        <div class="col-md-6 col-sm-12">
                            <div class="inner-holder">
                                <label>TYPE PET</label>
                                <input type="text" name="typep" value="{{ pets.typepet }}" required>
                            </div>
                        </div>

                        <br>


                        <div class="cp-cart-bottom">
                            <input class="cp-btn-style1 btn-more" type="submit" value="UPDATE PROFILE">

                            <a href="" class="cp-btn-style3">GO TO THE HOME PAGE</a>
                        </div><!--Cart Bottom Holder End-->
                    </div>
                </form><!--Checkout Form End-->


            </div>
        </section><!--Checkout Section End-->

    </div><!--Main Content End-->
{% endblock content %}